# 常见问题
## 开发板外设连接说明
x3开发板外设接口说明，如下图：
![开发板](./image/X3Board-overview.png "")

|序号|接口说明|
| -------- | ----- |
| 1 | 12V电源接口 |
| 2 | debug串口(默认921600) |
| 3 | Camera接口 |
| 4 | micro usb接口 |
| 5 | 千兆网口(默认IP：192.168.1.10) |
| 6 | usb 2.0 x4接口 |
| 7 | HDMI输出接口 |
| 8 | LCD/TP接口 |
| 9 | 电源指示灯 |

更多硬件详情，请参照《X3SDB硬件用户手册》。

### 摄像头连接
#### os8a10
使用软排线，连接摄像头到图中Camera接口。
如果使用时获取不到图像，请重新插拔，保证软排线接入正常。
#### usb摄像头
直接把摄像头连接接入到图中6所示的usb接口。
输入命令：
```c++
ls /sys/class/video4linux/ -all
```
此目录下如果新增了video*设备，表示usb摄像头连接正常。

## IP设置
使用系统自带的工具设置IP地址
```C++
hrut_ipfull s IP(x.x.x.x) MASK(y.y.y.y) GATEWAY(z.z.z.z)
```
比如
```C++
hrut_ipfull s 192.168.1.100 255.255.255.0 192.168.1.1
```
命令设置完后，重启系统即可生效


## 编译、部署及示例运行
### 编译
这里以编译X3的版本为例，其他平台类似。
获取aiexpress开发包后解压，执行命令：
```c++
cd ai_express_release && bash build.sh x3
```
### 部署
编译完成后，执行如下命令：
```c++
bash deploy.sh
```
脚本执行完毕后，在当前目录下生产deploy部署文件夹，把deploy文件夹拷贝到目标设备上。
### 示例运行
aiexpress开发包提供了多个solution示例和交互式运行脚本，这里以body solution为例，说明如何运行示例。

提前拷贝部署包到设备上，然后进入deploy目录，执行命令：
```c++
sh run.sh w
```
命令中w表示log级别，支持i/d/w/e/f等级别日志，根据需要自行设置。

执行命令后，提示选择solution：

![菜单](./image/menu_solution.png "")

选择3（body solution）后回车，提示选择设备平台：

![菜单](./image/menu_platform.png "")

选择3（x3_sdb表示x3生态开发板）后回车，提示选择vio类型：

![菜单](./image/menu_viotype.png "")

选择1（表示单路vio输入）后回车，提示选择sensor类型：

![菜单](./image/menu_sensor.png "")

选择2（os8a10摄像头）后回车，示例程序开始启动运行。

## 回灌模式
### 回灌方式说明
X3版本回灌支持3种模式，分别为cache， jpg与nv12这3个模式，区别如下：

| 回灌方式      |     功能说明       | 
| ----------     |     ------------    |
|cache|预先将所有的jpg图像解码到内存中，回灌的时候不需要再进行图像解码操|
|jpg|依次读取图像，解码，回灌。若使用循环回灌方式，则每次回灌会单独读取图像解码一次|
|nv12|和jpg的区别是回灌的图片是nv12的，只需要读取图像数据，不需要解码|


| 回灌方式       |   回灌图像配置   |
| ----------    | ------  |
|cache| **configs/vio_config.json.x3dev.fb**中image_list字段|
|jpg| **configs/vio_config.json.x3dev.fb**中配置的file_path，默认为**configs/vio_hg/name.list**|
|nv12| **configs/vio_config.json.x3dev.fb**中配置的file_path，默认为**configs/vio_hg/name_nv12.list**|

### 回灌示例
这里以body solution为例，说明如何运行回灌模式。

提前拷贝部署包到设备上，然后进入deploy目录，执行命令：
```c++
sh run.sh w
```
命令最后的w表示log级别，支持i/d/w/e/f等级别日志，根据需要自行设置。

执行命令后，提示选择solution：

![菜单](./image/menu_solution.png "")

选择3（body solution）后回车，提示选择设备平台：

![菜单](./image/menu_platform.png "")

选择3（x3_sdb表示x3生态开发板）后回车，提示选择vio类型：

![菜单](./image/menu_feedback.png "")

选择2（单路回灌模式）后回车，提示选择回灌输入类型：

![菜单](./image/menu_fb_type.png "")

选择1（选择cache模式）后回车，回灌模式示例程序开始启动运行。

## usb智慧电视场景，切换uvc与web模式
支持usb智慧电视场景的solution有：face、face_recog、body、behavior、gesture、tv_dance、tv_dance_960x544、tv_dance_no_kps_mask、tv_dance_with_kps_no_mask等。

不同solution对应不同的显示配置文件:

|solution示例|显示配置文件|
| -------- | ----- |
| face | configs/visualplugin_face.json |
| face_recog | configs/visualplugin_face.json |
| body | configs/visualplugin_body.json |
| behavior | configs/visualplugin_body.json |
| tv_dance | configs/visualplugin_body.json |
| tv_dance_960x544 | configs/visualplugin_body.json |
| tv_dance_no_kps_mask | configs/visualplugin_body.json |
| tv_dance_with_kps_no_mask | configs/visualplugin_body.json |

aiexpress的部署包默认是web模式，运行solution后，使用Chrome浏览器观看叠加算法效果后的实时视频流。

如果需要切换到uvc模式，启动前修改对应显示配置文件中的display_mode字段，对应关系如下：

|display_mode字段|模式|
| -------- | ----- |
| 1 | web模式 |
| 2 | uvc模式 |

## 视频盒子使用HDMI显示
运行视频盒子示例，需要使用HDMI显示。系统默认未开启HDMI显示功能，系统烧录成功后，可以参考如下方法，开启HDMI显示。

使用串口连接开发板，然后重启X3设备，重启后根据提示随意按任意键进入uboot模式。在uboot模式中敲入如下两个命令：
```
setenv bootargs earlycon console=ttyS0,921600 clk_ignore_unused video=hobot:x3sdb-hdmi kgdboc=ttyS0

saveenv
```

系统重启后，HDMI显示器上显示地平线LOGO，则说明HDMI显示设置成功。

## 视频盒子本地转发
视频盒子可使用本地264文件，实现文件转发功能。使用本地转发h264文件前，修改display_mode和local_forward配置。

|display_mode字段|模式|
| -------- | ----- |
| 0 | rtsp模式 |

|local_forward字段|模式|
| -------- | ----- |
| 1 | 本地转发 |
| 0 | 远程IPC |

目前支持一路和多路的本地转发功能，使用本地转发功能时，需要先修改`deploy/video_box/config/rtsp.json`中的url为：rtsp://ip:555/inputfilename。

`inputfilename`为deploy下的h264文件，例如x3 ip地址为10.64.35.193，默认h264文件为test.264,则url为 rtsp://10.64.35.193:555/test.264。

`channel_num`字段表示几路本地转发，如果只想使用1路本地转发，置1即可，目前最多支持4路。

`tcp`字段表示传输协议，置1。

完整deploy/video_box/configs/rtsp.json本地转发rtsp配置示例如下：
```bash
{
  "channel_num": 1,
  "channel0": {
    "rtsp_link": "rtsp://10.64.35.193:555/test.264",
    "tcp": 1,
    "frame_max_size": 1024, // 200K
    "save_stream": 0
  },
  "channel1": {
    "rtsp_link": "rtsp://10.64.35.194:555/test.264",
    "tcp": 1,
    "frame_max_size": 1024, // 200K
    "save_stream": 0
  },
  "channel2": {
    "rtsp_link": "rtsp://10.64.35.195:555/test.264",
    "tcp": 1,
    "frame_max_size": 1024, // 200K
    "save_stream": 0
  },
  "channel3": {
    "rtsp_link": "rtsp://10.64.35.196:555/test.264",
    "tcp": 1,
    "frame_max_size": 1024, // 200K
    "save_stream": 0
  }
}
```

然后修改`deploy/video_box/configs/visualplugin_video_box.json`配置中的display_mode，input_h264_filename和local_forward字段。

`display_mode`:0, 表示使用rtsp模式。
`input_h264_filename`:"test.264",表示本地264文件名为test.264。
`local_forward`:1,表示开启视频盒子本地转发功能。

完整deploy/video_box/configs/visualplugin_video_box.json配置示例如下：
```bash
{
  "auth_mode": 0,
  "display_mode": 0,
  "user": "admin",
  "password": "123456",
  "data_buf_size": 3110400,
  "packet_size": 102400,
  "input_h264_filename": "test.264",
  "local_forward": 1
}
```

# XProto原型应用开发框架开发指南
通过本文介绍，你可以熟悉XProto Framework原型框架的内部核心概念和使用。
## XProto设计理念
XStream聚集算法模型、策略的集成以及最终业务Workflow/SDK生成。而XProto是在XStream基础上，为基于XStream构建算法SDK提供APP的运行环境。它支持快速将XStream Workflow封装成可运行的APP，进行运行在地平线边缘芯片中。

下图是XProto APP基本架构图：

![框架](./image/xproto.png "")

如上图所示，将app中的输入、预测处理、输出模块化，方便后续系列产品直接复用扩展。

同时我们开放了XProto应用组件Plugin接口，支持用户对XProto框架进行扩展。
## XProto组成
XProto主要由XProto-Framework， msgtype， plugins等部分组成。其中XProto-Framework为框架本身内容，msgtype与plugins均是实现参考示例时的实现参考；客户基于XProto开发，可以不依赖msgtype与plugins
### XProto-Framework
XProto Framework原型框架主要包括Plugin插件管理和消息分发两个部分。Plugin插件是一个任务实体，所有的Plugin插件都连接到XProto消息总线中，当一个Plugin插件产生消息并把消息Push到总线之后，其他订阅该消息的Plugin插件就可以被调用。

每一个Plugin插件都可以向总线订阅和发布消息，通过消息驱动方式来实现整个原型应用的落地。

![XProto结构](image/xproto_struct.png)

XProto Framework简化了用户的开发任务，使其专注实现plugin本身。
XProto原型应用开发框架，定义了基础的消息类型、Plugin基础类定义以及消息发布订阅的处理逻辑。开发者基于XProto-Framework库+基础消息类型+Plugin基础类完成功能开发。
### Msgtype
定义各个组件使用的数据类型和proto的数据结构定义，方便不同的plugin产生的数据在plugins间传输，在已沉淀的solution中应用较多，比如VioMessage、SmartMessage、RtspMessage等。
开发者在使用xproto开发时，可以参考Msgtype；如果是开发者自己开发，可以不依赖Msgtype。
### plugins
xproto实现、沉淀了一些有用的插件供给客户复用，方便客户快速继承app。比如vioplugin用于获取图像输入、Rtspplugin用于把视频流直按照RTSP输出方便实时查看视频、websocketplugin实现了视频和智能数据的同步并支持在web上显示、uvcplugin则实现了uvc协议，方便在智能设备上实时显示视频和智能数据等。
推荐客户复用或扩展已有的plugin，也可以使用xstream实现自己的app框架。
## XProto-Framework用户手册
详细介绍xproto的运行原理及使用方法，方便客户理解xproto后快速构建app。
### 基本概念与运行机制
XProto Framework原型框架主要包括Plugin插件管理和消息分发两个部分。Plugin插件是一个任务实体，所有的Plugin插件都连接到XProto消息总线中，当一个Plubin插件产生消息并把消息Push到总线之后，其他订阅该消息的Plugin插件就可以被调用。
每一个Plugin插件都可以向总线订阅和发布消息，通过消息驱动方式来实现整个原型应用的落地。

![XProto结构](image/xproto_struct.png)
### 基础数据结构描述
#### 消息基础类
消息基础类XProtoMessage，新的Message类型需要继承XProtoMessage。
```c++
struct XProtoMessage : public std::enable_shared_from_this<XProtoMessage> {
  XProtoMessage &operator=(const XProtoMessage &) = delete;
  virtual ~XProtoMessage() = default;

  std::string type_ = "NONE";

  std::string param_ = "";

  std::string type() const { return type_; }

  virtual std::string Serialize() = 0;

  virtual void *ConvertData() {
    // need call delete() to release the output
    return nullptr;
  }
};

using XProtoMessagePtr = std::shared_ptr<XProtoMessage>;
```

消息的声明与定义：
* 使用宏XPLUGIN_REGISTER_MSG_TYPE,自定义消息类型，每个消息名字唯一；
* 监听消息的插件需要：
  * 实现消息处理函数；
  * 覆盖Init函数，在其中完成监听消息注册，并绑定对应的消息处理函数，
  * 及其他初始化工作，同时在函数返回前需要调用父plugin的Init方法，
  * 通常是XPluginAsync::Init()。

相关接口定义如下：
```c++
// 声明消息类型;每一类消息都有一个字符串形式的消息类型和结构体来表示.
// 该接口为一个宏, 参数MSG_TYPE用来表示声明的消息类型, 需要直接使用标识符的格式书写, 宏内部会将其转成字符串.  
// 需要在消费者Plugin调用订阅消息接口之前调用该接口声明消息类型,一般将该宏放在全局变量声明的位置.
// 参数：MSGTYPE: 消息类型
XPLUGIN_REGISTER_MSG_TYPE(MSG_TYPE)

// 初始化Plugin
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 该接口用来初始化Plugin，自定义Plugin一般在该接口内调用订阅消息接口, 然后继续调用XPluginAsync::Init接口以初始化父类.
// 返回值：0: 成功；非0: 失败
int XPluginAsync::Init() override;

// 发布消息
// 该接口用来将消息发布到XProto内部总线上. 接收一个类型为XProtoMessage的结构体指针, XProto的所有消息都继承于该类型.
// 参数：XProtoMessagePtr msg: 发布到总线的消息. 
void XPluginAsync::PushMsg(XProtoMessagePtr msg);

// 订阅消息
// 订阅指定类型的消息. 监听总线, 当指定的消息类型发布时, 调用回调函数.  
// 自定义的Plugin需要在Init函数中，调用XPluginAsync::Init之前调用该接口完成监听消息注册。
// 参数：const std::string& type: 消息类型字符串.
// 参数：XProtoMessageFunc callback: 该类型消息的回调函数.
void XPluginAsync::RegisterMsg(const std::string& type, XProtoMessageFunc callback);
```

### Plugin接口描述
一个plugin代表一个单独的功能模块，可以向总线订阅和发布消息，通过消息驱动方式来实现整个原型应用的落地。
插件可能会生产消息或者向总线注册监听某类消息。如果生产消息需要调用PushMsg()将消息发送到总线分发;如果监听消息，需要实现消息处理函数，并在Init函数中注册需要监听的消息类型，绑定对应的消息处理函数，同时在Init函数返回前调用父plugin的Init方法，通常是XPluginAsync::Init()。
插件提供了两个基础类XPlugin和XPluginAsync，继承这两个基础类之一可实现一个新的plugin，通过override的函数包括:`Init()、Start()、Stop()、Desc();`等接口来管理插件的生命周期。两个plugin基类功能上有些差异：
* XPlugin类：定义了管理周期的相关接口以及发送接收消息的接口，接收到的消息需要自己管理分发
* XPluginAsync类：在XPlugin的基础上，增加了消息的分发功能和流量管理，用户只需要实现消息回调函数即可
```c++
class XPlugin : public std::enable_shared_from_this<XPlugin> {
 public:
  XPlugin() = default;
  virtual ~XPlugin() = default;
  // 完成register msg和workflow的初始化操作
  virtual int Init() = 0;

  virtual int DeInit() {
    return 0;
  }
  // 处理register的msg类型，如有需要，push自己的msg到总线
  virtual void OnMsg(XProtoMessagePtr msg) = 0;
  // 用于流量管理
  virtual int GetPluginMsgCount() = 0;
  virtual int GetPluginMsgLimit() = 0;
  virtual void SetPluginMsgLimit(int msg_limit_count) = 0;

  virtual std::string desc() const {
    return "XPlugin";
  }

 protected:
  // 向总线注册监听消息类型
  void RegisterMsg(const std::string& type);
  // 卸载监听消息类型
  void UnRegisterMsg(const std::string& type);
  // 向总线推送消息
  void PushMsg(XProtoMessagePtr msg);
};

class XPluginAsync : public XPlugin {
 public:
  XPluginAsync();
  explicit XPluginAsync(int thread_num);
  ~XPluginAsync() = default;
  // 注册监听消息类型到总线+plugin的初始化
  int Init() override;
  int DeInit() override;
  // 消息处理上半部分，将消息推送该plugin的消息队列 + 流量控制
  void OnMsg(XProtoMessagePtr msg);
  int GetPluginMsgCount();
  int GetPluginMsgLimit();
  void SetPluginMsgLimit(int msg_limit_count);
  // 启动Plugin
  virtual int Start() {
    return 0;
  }
  // 停止Plugin
  virtual int Stop() {
    return 0;
  }
#ifdef PYAPI
  void RegMsg(const std::string &type,
              std::function<void(pybind11::object)> cb);
#endif

 protected:
  using XProtoMessageFunc = std::function<int(XProtoMessagePtr)>;
  // 重载注册监听消息类型接口，注册时包含异步回调函数
  // 该函数中需要调用RegisterMsg(XpluginMessageType type)完成总线注册
  // Note: 自定义的plugin需要在Init函数中，
  //       调用XPluginAsync::Init之前调用该接口完成监听消息注册。
  void RegisterMsg(const std::string& type, XProtoMessageFunc callback);

 private:
  // 消息处理下半部分，分发消息并调用对应的callback函数
  void OnMsgDown(XProtoMessagePtr msg);

  hobot::CThreadPool msg_handle_;
  std::mutex msg_mutex_;
  int msg_limit_count_ = 0;
  std::mutex msg_limit_mutex_;
  std::map<std::string, XProtoMessageFunc> msg_map_;
};
```
相关接口描述如下：
```c++
// 初始化Plugin
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 该接口用来初始化Plugin，自定义Plugin一般在该接口内调用订阅消息接口, 然后继续调用XPluginAsync::Init接口以初始化父类.
// 返回值：0: 成功；非0: 失败
int XPluginAsync::Init() override;

// 启动Plugin
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 该接口用来启动Plugin. 
// 返回值：0: 成功；非0: 失败
int XPluginAsync::Start();

// 停止Plugin
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 该接口用来停止Plugin. 
// 返回值：0: 成功；非0: 失败
int XPluginAsync::Stop();

// 反初始化Plugin
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 该接口用来反初始化Plugin.  继承自XPluginAsync子plugin类，在完成自己的反初始化任务后，最后需要调用XPluginAsync::DeInit接口以反初始化父类.
// 返回值：0: 成功；非0: 失败
int XPluginAsync::DeInit() override;

// 插件描述信息
// 该接口需要继承XPluginAsync类的自定义Plugin实现该接口定义. 
// 返回值：描述当前自定义Plugin的字符串.
std::string XPluginAsync::desc() const;
```

### XProto开发示例
XProto提供了一系列的开发示例，基于XProto实现了简单的功能，介绍`消息`和`插件`的基本使用，和XProto消息管理的高阶功能。

#### stage1 消息的订阅和发布
本节将介绍如何使用Xproto框架实现不同插件之间消息的发布和订阅。
详细参见[tutorials_stage1 消息的订阅和发布](../../xsdk/common/xproto/framework/tutorials/stage1/README.html)

#### stage2 插件的最大消息队列
本节将介绍Xproto框架中消息的管理，有的业务场景下消息产生和消费速率不同，容易造成总线上消息的堆积，本节将介绍如何设置插件的最大消息队列数。

详细参见[tutorials_stage2 插件的最大消息队列](../../xsdk/common/xproto/framework/tutorials/stage2/README.html)

#### stage3 消息处理超时警告
本节介绍使用Xproto框架对消息处理的耗时进行监控。当插件处理消息的耗时超过默认时长，程序内回抛出警告日志。
详细参见[tutorials_stage3 消息处理超时警告](../../xsdk/common/xproto/framework/tutorials/stage3/README.html)


## 内置数据类型msgtype
* protobuf：用于序列化智能数据，便于不同平台间交互，详细请参考x3.proto文件
* can_bus_data：用于存放接收来自MCU或发送到MCU的消息
* gdcplugin_data：用于存放俯视图
* hbipcplugin_data：hbipcplugin交互的数据载体
* reorderplugin_data：reorderplugin交互的数据载体
* rtspplugin_data：rtspplugin对外输出视频的数据载体
* smartplugin_data：智能数据的载体
* vioplugin_data：vio图像数据载体

## 内置plugin
### 1. Smart Plugin
Getting Started with smartplugin

#### 简介
Smartplugin是基于XStream通用sdk接口开发的通用智能化sdk运行框架。
Smartplugin监听viomessage，调用XStream通用sdk接口得到智能化结果，并把智能化结果以protobuf的方式序列化之后以smartmessage的消息格式发送到总线(xproto)。

#### 定制开发
定制开发需要三步：
1. 根据自己的智能化应用需要依赖的XStream method更新build.properties文件及src/xstream/method_factory.cpp;
2. 根据自己的智能化应用需要输出的智能化结果重写protobuf串行化，即重新实现SmartMessage的Serialize方法。
master分支提供了串行化输出的人脸检测框的sample程序，标准化的protobuf协议在repo xproto_msgtype/include/xproto_msgtype/protobuf/proto/x2.proto。
```c++
std::string CustomSmartMessage::Serialize() {
  // serialize smart message using defined smart protobuf.
  std::string proto_str;
  x2::FrameMessage proto_frame_message;
  auto smart_msg = proto_frame_message.mutable_smart_msg_();
  smart_msg->set_timestamp_(time_stamp);
  smart_msg->set_error_code_(0);
  // user-defined output parsing declaration.
  HobotXStream::BaseDataVector *face_boxes = nullptr;
  for (const auto &output : smart_result->datas_) {
    if (output->name_ == "face_bbox_list") {
      face_boxes = dynamic_cast<HobotXStream::BaseDataVector *>(output.get());
      for (int i = 0; i < face_boxes->datas_.size(); ++i) {
        auto face_box =
            std::static_pointer_cast<HobotXStream::XStreamData<hobot::vision::BBox>>(
                face_boxes->datas_[i]);
        LOGD << "x1: " << face_box->value.x1 << " y1: " << face_box->value.y1
             << " x2: " << face_box->value.x2 << " y2: " << face_box->value.y2
             << " track_id: " << face_box->value.id << "\n";
        auto target = smart_msg->add_targets_();
        target->set_type_("face");
        target->set_track_id_(face_box->value.id);
        auto proto_box = target->add_boxes_();
        proto_box->set_type_("face");
        auto point1 = proto_box->mutable_top_left_();
        point1->set_x_(face_box->value.x1);
        point1->set_y_(face_box->value.y1);
        auto point2 = proto_box->mutable_bottom_right_();
        point2->set_x_(face_box->value.x2);
        point2->set_y_(face_box->value.y2);
      }
    }
  }

  proto_frame_message.SerializeToString(&proto_str);
  return proto_str;
}
```

3. 将编译完成的库替换deploy/xprotocp_smart/lib/下的libsmartplugin.so。
  更新xstream workflow配置文件，默认为deploy/configs/smart_config.json
```json
  {
      "xstream_workflow_file": "configs/det_mot.json",
      "enable_profile": 0,
      "profile_log_path": "/userdata/log/profile.txt"
  }
```

- xstream_workflow_file: 指定xstream workflow配置文件;
- enable_profile: 是否使能online profile，该feature是xstream支持的feature，如果method开发中包括了profile信息可通过该开关online使能;
- profile_log_path: online profile 日志输出路径。

将xprotocp_smart部署包放在真机上，运行xproto_start.sh 即可启动智能化应用;

其中，sample/smart_main.cpp即是主程序源码，主程序启动方式为：

`smart_main  [-i/-d/-w/-f] xstream_config_file`

-i/-d/-w/-f 分别指定对应info、debug、warning、fatal日志等级。


#### 智能数据解析说明
Protobuf数据格式定义见`common/xproto/msgtype/include/xproto_msgtype/protobuf/proto/x3.proto`

解析ProtoBuf智能数据FrameMessage，FrameMessage包括SmartFrameMessage、CaptureFrameMessage、StatisticsMessage、Image、Timestamp

##### SmartFrameMessage
SmartFrameMessage包括Timestamp、Error_Code和Target

1. 人体智能信息
```
Target {
  string type_;             // "person"
  uint64 track_id_;         // track_id
  repeated Box boxes_ = [{
    string type_;           //  "body"、"head" 或 "face"，分别表示人脸框、人头框、人体框
    Point top_left_;        // 框左上点坐标
    Point bottom_right_;    // 框右下点坐标
    float score;
  }];
  repeated Points points_ = [Points {
    string type_;           // "body_landmarks"，表示人体骨骼点集合
    repeated Point points_;
  }];
  repeated Attributes attributes_ = [{
    string type_;           // "age"、"gender"、"face_mask", 分别表示年龄、性别、口罩
                            // "fall"、"raise_hand"、"stand"、"squat", 分别表示摔倒、举手、站立和蹲下
                            // "action"表示体感游戏

    float value_;           // 属性对应的值
    string value_string_;   // reserved
    float score_;           // 置信度
  }];
}
```

2. 车辆信息
```
Target {
  string type_;               // "vehicle"、"vehicle_capture"、"vehicle_anomaly"，分别表示车辆信息、抓拍车辆信息、抓拍车辆违法信息
  uint64 track_id_;           // track_id
  repeated Box boxes_ = [{
    string type_;             // "vehicle_box" 表示车体框
    Point top_left_;
    Point bottom_right_;
    float score;
  }];

  repeated Image imgs_ = [{   // 抓拍图像，仅抓拍车辆、抓拍违法车辆包含该信息
    bytes buf_;               // 二进制图
    string type_;             // "jpg"，图片类型
    uint32 width_;            // 图像宽度
    uint32 height_;           // 图像高度
  }];

  repeated Attributes attributes_ = [{
    string type_;             // "vehicle_type"、"vehicle_color"、"vehicle_lane_id"、"vehicle_speed"，分别表示车辆类型、颜色、所在车道、车速
                              // "vehicle_anomalys_type"，表示车辆违法类型，仅抓拍违法车辆包含该信息           

    float value_;             // 属性对应的值
    string value_string_;     // reserved
    float score_;             // 置信度
  }];

  repeated Points points_ = [Points {
    string type_;             // "vehicle_key_points"，表示车辆关键点
                              // "vehicle_location"，表示车辆物理位置
    repeated Point points_;
  }];

  repeated FloatArray float_arrays_ = [{
    string type_;             // "vehicle_gis"，表示车辆gis信息
    repeated float value_;
  }];

  repeated Target sub_targets_ = [{
    string type_;             // "plate" 表示车牌
    repeated Box boxes_ = [{
      string type_;           // "plate_box" 表示车排框
      Point top_left_;
      Point bottom_right_;
      float score;
    }];

    repeated Attributes attributes_ = [{
      string type_;           // "is_double_plate"，表示双车牌
                              // "plate_num"，表示车牌号
                              // "plate_color"，表示车牌颜色
                              // "plate_type"，表示车牌类型

      float value_;           // 属性对应的值
      string value_string_;   // reserved
      float score_;           // 置信度
    }];

    repeated Points points_ = [Points {
      string type_;           // "plate_key_points"，表示车排关键点
      repeated Point points_;
    }];
  }];
}
```

3. 行人、非机动车信息
```
Target {
  string type_;           // "person"或"no-motor"
  uint64 track_id_;       // track_id
  repeated Box boxes_ = [{
    string type_;         // "person_box"、"no-motor_box"，分别表示人体框、非机动车框
    Point top_left_;
    Point bottom_right_;
    float score;
  }];

  repeated FloatArray float_arrays_ = [{
    string type_;           // "person_gis"、"no-motor_gis"，分别表示行人、非机动车gis信息
    repeated float value_;
  }];
}
```

##### StatisticsMessage
4. 车流统计信息
```
StatisticsMessage {
   repeated Attributes attributes_ = [{
      string type_;           // "trafficflow_hour_index"，表示时段
                              // "trafficflow_cycle_count"，表示每个时段周期数
                              // "trafficflow_cycle_minute"，表示第几个周期
                              // "trafficflow_vehicle_sum"，表示总过车数
                              // "trafficflow_big_vehicle_sum"，表示大车过车数
                              // "trafficflow_small_vehicle_sum"，表示小车过车数
                              // "trafficflow_mean_speed"，表示平均过车速度

      float value_;           // 属性对应的值
      string value_string_;   // reserved
      float score_;           // 置信度
    }];
}
```

### 2. HbipcPlugin

HbipcPlugin为跨板传输插件，主要负责实现AP与地平线CP端的双向通信功能，CP端通过HbipcPlugin将智能帧等数据发送到AP端，或者通过HbipcPlugin接收AP端发过来的配置数据与命令数据。


HbipcPlugin是基于地平线HBIPC框架实现，使用之前需要先提供一个HBIPC的配置参数：
```json
{
  "domain_name": "X2SD001",
  "server_id": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14]
}
```
* `domain_name`表示HBIPC通信域， 可选的值有`X2SD001`和`X2BIF001`， 分别对应bifsd和bifspi两种物理通路。
* `server_id`表示CP侧的服务ID，UUID格式。AP侧在建立连接的时候会用到该UUID。

| server_id | description |
| --------- | ----------- |
| 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xe | XProto通信服务 |

HBIPC框架的库与使用示例请参考系统软件bsp发布包。

当HBIPCPlugin收到AP侧发来的配置数据和命令数据时，会将其以`XPLUGIN_HBIPC_MESSAGE`类型的消息发送到XProto内部总线。消息对应的结构体定义如下：

```c++
struct HbipcMessage : XProtoMessage {
  HbipcMessage() { type_ = "XPLUGIN_HBIPC_MESSAGE"; }
  std::string Serialize() override { return "Default hbipc message"; }
  virtual ~HbipcMessage() = default;
};

struct CustomHbipcMessage : HbipcMessage {
  explicit CustomHbipcMessage(std::string proto) : proto_(proto) {
    type_ = "XPLUGIN_HBIPC_MESSAGE";
  }
  std::string Serialize() override;

 private:
  std::string proto_;
};
```

HBIPCPlugin负责将VioPlugin和SmartPlugin产生的消息发送到AP侧，所以它需要监听总线上面的`XPLUGIN_SMART_MESSAGE`、`XPLUGIN_IMAGE_MESSAGE`和`XPLUGIN_DROP_MESSAGE`。
+ `XPLUGIN_SMART_MESSAGE`: 智能数据帧。
+ `XPLUGIN_IMAGE_MESSAGE`：图像数据帧。
+ `XPLUGIN_DROP_MESSAGE`：报告VIOPlugin丢弃的帧。

同时，HbipcPlugin也提供了以下公共接口，支持客户在业务逻辑中进行集成：
```c++
class HbipcPlugin : public XPluginAsync {
 public:
  HbipcPlugin() = default;
  // 构造HbipcPlugin对象, 并指定VIO配置文件.
  explicit HbipcPlugin(const std::string& config_file);
  // 初始化Plugin.
  int Init() override;
  // 反初始化plugin
  int Deinit();
  // 启动Plugin.
  int Start() override;
  // 停止VioPlugin。
  int Stop() override;
};
```
关于HBIPCPlugin，详细参考[README](../../xsdk/common/xproto/plugins/hbipcplugin/README.md)。

### 3.WebsocketPlugin

WebsocketPlugin为web多媒体传输方式插件，基于开源项目uwebsocket开发，用于通过web浏览器展示视频和算法效果。

```json
{
  "auth_mode": 0,
  "display_mode": 1,
  "user": "admin",
  "password": "123456",
  "smart_type": 1,
  "video_type": 1,
  "image_width": 1920,
  "image_height": 1080,
  "layer": 0,
  "720p_layer": 5,
  "1080p_layer": 4,
  "2160p_layer": 0,
  "data_buf_size": 3110400,
  "packet_size": 102400,
  "jpeg_quality": 80,
  "frame_buf_depth": 3,
  "dump_jpg_num": 0,
  "jpg_encode_time": 0,
  "use_vb":0,
  "attribute_description_path": "configs/websocketplugin_attribute.json",
  "vlc_support": 1,
  "is_cbr": 1,
  "bitrate": 6000,
  "h264_encode_time": 0,
  "smart_transfer_mode": 0, // 0: hid, 1: rndis
  "rndis_port": 9999
}
```
采用websocket方案时display_mode为1。

WebsocketPlugin负责将VioPlugin和SmartPlugin产生的消息发送到web端，所以它需要监听总线上面的`XPLUGIN_SMART_MESSAGE`、`XPLUGIN_IMAGE_MESSAGE`和`XPLUGIN_DROP_MESSAGE`。
+ `XPLUGIN_SMART_MESSAGE`: 智能数据帧。
+ `XPLUGIN_IMAGE_MESSAGE`：图像数据帧。
+ `XPLUGIN_DROP_MESSAGE`：报告VIOPlugin丢弃的帧。

同时，WebsocketPlugin也提供了以下公共接口，支持客户在业务逻辑中进行集成：
```c++
class WebsocketPlugin : public xproto::XPluginAsync {
 public:
  WebsocketPlugin() = delete;
  explicit WebsocketPlugin(std::string config_path);
  ~WebsocketPlugin() override;
  int Init() override;
  int Start() override;
  int Stop() override;
}
```

### 4.UvcPlugin
UvcPlugin为usb传输插件，基于uvc 1.0和hid 1.01协议开发，用于通过usb向客户端播放器发送视频和智能数据。可通过PC端potplayer,amcap等或者android端usb camera等第三方app预览视频，或通过地平线自研的安卓app预览视频和智能效果。

UvcPlugin负责将VioPlugin和SmartPlugin产生的消息发送到web端，所以它需要监听总线上面的`XPLUGIN_SMART_MESSAGE`、`XPLUGIN_IMAGE_MESSAGE`和`XPLUGIN_DROP_MESSAGE`。
+ `XPLUGIN_SMART_MESSAGE`: 智能数据帧。
+ `XPLUGIN_IMAGE_MESSAGE`：图像数据帧。
+ `XPLUGIN_DROP_MESSAGE`：报告VIOPlugin丢弃的帧。
```json
{
  "auth_mode": 0,
  "display_mode": 1,
  "user": "admin",
  "password": "123456",
  "smart_type": 1,
  "video_type": 1,
  "image_width": 1920,
  "image_height": 1080,
  "layer": 0,
  "720p_layer": 5,
  "1080p_layer": 4,
  "2160p_layer": 0,
  "data_buf_size": 3110400,
  "packet_size": 102400,
  "jpeg_quality": 80,
  "frame_buf_depth": 3,
  "dump_jpg_num": 0,
  "jpg_encode_time": 0,
  "use_vb":0,
  "attribute_description_path": "configs/websocketplugin_attribute.json",
  "vlc_support": 1,
  "is_cbr": 1,
  "bitrate": 6000,
  "h264_encode_time": 0,
  "smart_transfer_mode": 0, // 0: hid, 1: rndis
  "rndis_port": 9999
}
```
采用uvc方式时，display_mode为2。

同时，UvcPlugin也提供了以下公共接口，支持客户在业务逻辑中进行集成：
```c++
class UvcPlugin : public xproto::XPluginAsync {
 public:
  UvcPlugin() = delete;
  explicit UvcPlugin(std::string config_path);
  ~UvcPlugin() override;
  int Init() override;
  int Start() override;
  int Stop() override;
}
```

### 5. IoTVioPlugin
IoTVioPlugin的的应用场景是用于X3系统，整体框架、消息总线传输机制实际是和X2 VIOPlugin的功能类似。主要功能负责获取、转换图像数据并控制图像数据获取速率，然后将图像数据或丢帧消息推送给消息总线。针对于接口层，最主要的区别是IoTVioPlugin不仅支持与X2 VioPlugin相同的原生接口，还是支持与海思一样类似的接口。IoTVioPlugin同样分为两个部分：
* 图像数据的获取：图像来源可以分为SIF（摄像头）、JPEG回灌图片和NV12回灌图片。
* 控制图像数据获取速率：VioPlugin中通过定长buffer来实现速率控制。buffer大小可以通过JSON文件进行配置。单输入图像源的情况下理论最多可达6个，当智能帧产生速率过慢，buffer耗尽时，VioPlugin产生主动丢帧数据
* 消息的产生和推送：消息分为图像数据消息与主动丢帧数据消息，由第一部分产生后推送至消息总线。
* 支持单路camera、单路回灌、多路camera不同步运行、多路camera同步运行、一路cam+一路回灌同时运行 (目前可支持的多路理论最多达6路)
  * 多路camera不同步运行，顾名思义就是获取上来的camera数据是独立的，每个camera就分别占用一路pipeID。例如两路camera，就会分别获取到两路不同的图像数据结果
  * 多路camera同步运行，顾名思义就是上层每帧只能获取一次结果，该结果中包含了多路camera的图像数据，并且多路的图像数据的时间戳是同步过的，如果多路中有任意一路发生丢帧，则用户也无法获取到其他路的图像结果数据。

```json
{
  "pipeline": {
    "cam_en": 1,
    "vin_vps_mode": 1,
    "vin": {
      "sensor": {
        "sensor_id": 5,
        "sensor_port": 0,
        "i2c_bus": 5,
        "need_clk": 1,
        "serdes_index": 0,
        "serdes_port": 0
      },
      "mipi": {
        "host_index": 1,
        ...
      }
      ....
    "vps": {
      "vps_dump_num": 0,
      "vps_layer_dump": 4,
      "feedback": {
		"fb_width": 1920,
		"fb_height": 1080,
        "fb_buf_num": 8
      },
        "chn0": {
          "ipu_chn_en": 0,
          "pym_chn_en": 0,
          "roi_en": 0,
          "roi_x": 0,
          "roi_y": 0,
          "roi_w": 3840,
          "roi_h": 2160,
          "scale_w": 3840,
          "scale_h": 2160,
          "frame_depth": 8,
		  "timeout": 2000
        }
      ....
        "chn6": {
          "ipu_chn_en": 1,
          "pym_chn_en": 1,
          "roi_en": 0,
          "roi_x": 0,
          "roi_y": 0,
          "roi_w": 3840,
          "roi_h": 2160,
          "scale_w": 3840,
          "scale_h": 2160,
          "frame_depth": 8,
		  "timeout": 2000
        }
      },
      "pym": {
          "pym_ctrl_config": {
              "frame_id": 1,
              "ds_layer_en": 23,
              "ds_uv_bypass": 0,
              "us_layer_en": 0,
              "us_uv_bypass": 0,
              "frame_depth": 8,
              "timeout": 2000
          },
          "pym_ds_config": {
              "roi_x_1": 0,
              "roi_y_1": 0,
              "roi_w_1": 0,
              "roi_h_1": 0,
              "factor_1": 0,
              ...
              "roi_x_23": 0,
              "roi_y_23": 0,
              "roi_w_23": 0,
              "roi_h_23": 0,
              "factor_23": 0
          },
          "pym_us_config": {
              "roi_x_0": 0,
              "roi_y_0": 0,
              "roi_w_0": 0,
              "roi_h_0": 0,
              ...
              "roi_x_5": 0,
              "roi_y_5": 0,
              "roi_w_5": 0,
              "roi_h_5": 0,
              "factor_5": 0
          }
      }
	}
  }
}

各个字段的含义:
* pipeline: 一个配置文件表示一路pipeline, 目前最大同时支持6路pipeline
* cam_en: 等于1是使用实时camera；等于0是回灌模式
* vin_vps_mode: vin和vps模块内部和模块之间的模式，0为全部是在线模式，1为vin->vps模块之间是离线模式(vin和vps模块内部是online模式)
  * sensor: 说明以下是sensor的配置属性
    * sensor_id: sensor的型号。其中imx327是1, os8a10是5, s5kgm1sp是14
    * sensor_port: sensor端口。根据具体硬件，一般默认为0
    * i2c_bus: i2c总线号。根据具体硬件，对于x3开发板推荐imx327和os8a10是I2C5，s5kgm使用I2C4, x3sdb生态板os8a10默认使用I2C2
    * serdex_index: 加解串的索引。根据具体硬件，一般为0
    * serdex_port: 加解串的端口。根据具体硬件，一般为0
  * mipi: 说明以下是mipi模块的配置属性
    * host_index: mipi host索引。根据具体硬件，一般如果是接入I2C0，则为0；如果是I2C4或者I2C5，则为1
  * vps: 说明以下是vps模块的配置属性
    * vps_dump: 使能vps功能dump pym基础层的nv12图像，用于调试
    * vps_dump_layer: 使能vps功能dump pym任意层(包括roi层)的nv12图像，用于调试
    * feedback: 说明以下是回灌的配置属性
      * fb_width: 回灌图片的宽度
      * fb_height: 回灌图片的高度
      * fb_buf_num: 回灌的轮转buffer数量
    * chn0: 说明以下是chn0的配置属性，该通道是离线通道
      * ipu_chn_en: 是否使能chn0的ipu通道, 1是使能，0是disable
      * pym_chn_en: 是否使能chn0的pym通道, 1是使能，0是disalbe
      * roi_en: 是否使能chn0的roi裁剪功能, 1是使能，0是disalbe
	  * roi_x: roi区域的左上角x坐标值
	  * roi_y: roi区域的左上角y坐标值
	  * roi_w: roi区域的宽度
	  * roi_h: roi区域的高度
      * scale_w: 缩放后的宽度
      * scale_h: 缩放后的高度
      * frame_depth: 申请的vio buffe该通道的最大frame buffer数量，如果设置为8，留给应用的就是8个vio buffer，frame_depth最大值为32
    * chn6: 说明以下是chn6的配置属性，该通道在线通道
      * ipu_chn_en: 是否使能chn0的ipu通道，1是使能，0是disable，注意：ipu和pym的通道必须同时为1或者为0
      * pym_chn_en: 是否使能chn0的pym通道，1是使能，0是disalbe，注意：ipu和pym的通道必须同时为1或者为0
      * 其余配置参数与chn0是相同的含义
    * pym: 说明以下是pym的配置属性
      * pym_ctrl_config: 说明以下是pym控制配置属性
        * frame_id: frame id的起始号，一般为1
        * ds_layer_en: downscale一共使能多少层，一般为23 (0~23层)
        * ds_uv_bypass: 是否bypass ds uv层，一般为0
        * us_layer_en: upscale一共使能多少层，根据需用设置，最大为6层
        * us_uv_bypass: 是否bypass us uv层，一般为0
        * frame_depth: 申请的pym通道最大frame buffer数量，默认为8，底层会默认使用5个buffer，留给应用的就是8-5 = 3个vio buffer，frame_depth最大值为32
        * timeout: 上层阻塞获取pym frame的超时时间，单位为ms，默认为2000ms
      * pym_ds_config: 说明以下是pym downscale的roi层配置属性
        * roi_x_1: 金字塔第1层roi区域相对于对应基本层左顶点坐标x
        * roi_y_1: 金字塔第1层roi区域相对于对应基本层左顶点坐标y
        * roi_w_1: 金字塔第1层roi区域宽度，不能超过其基础层宽度
        * roi_h_1: 金字塔第1层roi区域高度，不能超过其基础层高度
        * factor_1: 金字塔第1层roi缩放系数，整体计算缩放为基础层的64/(64 + factor)的倍数。factor 为0时，表示disable 该层缩放，factor 取值范围 0--63
      * pym_us_config:说明以下是pym upscale的roi层配置属性
        * roi_x_0: 金字塔第0层roi区域相对于对应基本层左顶点坐标x
        * roi_y_0: 金字塔第0层roi区域相对于对应基本层左顶点坐标y
        * roi_w_0: 金字塔第0层roi区域宽度，不能超过其基础层宽度
        * roi_h_0: 金字塔第0层roi区域高度，不能超过其基础层高度
        * factor_0: 金字塔第0层roi放大系数，factor 为0时，表示disable 该层缩放，factor 取值为固定值，即：
          * factor_0: 50 放大1.28倍
          * factor_1: 40 放大1.6倍
          * factor_2: 32 放大2倍
          * factor_3: 25 放大2倍
          * factor_4: 20 放大3.2倍
          * factor_5: 16 放大4倍
*
```
IotVioPlugin是以VioPipeLine为每路接口，每路必须要有一个pipe_id，该pipe_id通过调用VioPipeManager::GetPipeId()接口的返回值来获取。
pipe_id的取值范围为(0~5),即最多存在6路camera的pipeline同时运行(受限于mipi host的硬件限制以及ddr带宽限制)

如下是VioPipeLine的接口，支持单路和多路同步接口，并支持客户在业务逻辑中进行集成。主要包括单路和多路同步2个部分：
 * 单路camera和单路回灌
   * 单路camera获取原始帧信息(GetIpuInfo)、金字塔的处理结果帧(GetPymInfo)
   * 单路回灌获取回灌图像存储信息(GetFbSrcInfo)、回灌图像处理(SetFbPymProcess)
   * 单路释放原始帧释放接口(FreeIpuInfo)、金字塔结果帧释放接口(FreePymInfo)
 * 多路camera同步
   * 多路camera获取原始帧信息(GetMultIpuInfo)、金字塔的处理结果帧(GetMultPymInfo)
   * 多路camera释放原始帧释放接口(FreeMultIpuInfo)、金字塔结果帧释放接口(FreeMultPymInfo)

```c++
class VioPipeLine {
 public:
  VioPipeLine() = delete;
  VioPipeLine(const std::vector<std::string> &pipe_file, const int &pipe_id)
    : pipe_file_(pipe_file), pipe_start_idx_(pipe_id) {}
  ~VioPipeLine() {}

  int Init();
  int DeInit();
  int Start();
  int Stop();
  /**
   * single pipeline info
   * 1.GetInfo: GetPymInfo, GetIpuInfo, GetFbSrcInfo
   * 2.SetInfo: SetFbPymProcess
   * 3.FreeInfo: FreeIpuInfo, FreePymInfo
   *
   *  info_type is defined in vio_data_type.h
   */
  int GetInfo(uint32_t info_type, void *data);
  int SetInfo(uint32_t info_type, void *data);
  int FreeInfo(uint32_t info_type, void *data);
  /**
   * multi pipeline sync info, general two camera source
   * 1.GetMultInfo: GetMultPymInfo, GetMultIpuInfo
   * 2.SetMultInfo: SetMultFbPymProcess
   * 3.FreeMultInfo: FreeMultIpuInfo, FreeMultPymInfo
   *
   *  info_type is defined in vio_data_type.h
   */
  int GetMultInfo(uint32_t info_type, void *data);
  int SetMultInfo(uint32_t info_type, void *data);
  int FreeMultInfo(uint32_t info_type, void *data);
}
```

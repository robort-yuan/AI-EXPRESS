/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     plugin.h
 * \Author   Yingmin Li
 * \Mail     yingmin.li@horizon.ai
 * \Contributor Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-04-22
 * \Brief    async implementatiion of xplugin.h
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

#ifndef INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
#define INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
#include <memory>
#include <string>
#include "xproto/message/pluginflow/flowmsg.h"
namespace horizon {
namespace vision {
namespace xproto {
class XPlugin : public std::enable_shared_from_this<XPlugin> {
 public:
  XPlugin() = default;
  virtual ~XPlugin() = default;
  // 完成register msg和workflow的初始化操作
  virtual int Init() = 0;

  virtual int DeInit() {
    return 0;
  }
  // 处理register的msg类型，如有需要，push自己的msg到总线
  virtual void OnMsg(XProtoMessagePtr msg) = 0;
  // 用于流量管理
  virtual int GetPluginMsgCount() = 0;
  virtual int GetPluginMsgLimit() = 0;
  virtual void SetPluginMsgLimit(int msg_limit_count) = 0;
  // plugin处理msg时间监控
  virtual int GetMsgMonitorTime() = 0;
  virtual void SetMsgMonitorTime(int msg_monitor_time) = 0;

  virtual std::string desc() const {
    return "XPlugin";
  }

 protected:
  // 向总线注册监听消息类型
  void RegisterMsg(const std::string& type);
  // 卸载监听消息类型
  void UnRegisterMsg(const std::string& type);
  // 向总线推送消息
  void PushMsg(XProtoMessagePtr msg);
  // 向总线推送消息
  int TryPushMsg(XProtoMessagePtr msg);
};
using XPluginPtr = std::shared_ptr<XPlugin>;

}  // namespace xproto
}  // namespace vision
}  // namespace horizon
#endif  // INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
